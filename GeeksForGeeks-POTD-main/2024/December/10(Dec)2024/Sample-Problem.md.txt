
# Non-overlapping Intervals

### Difficulty: Medium  
**Accuracy:** 51.92%  
**Submissions:** 21K+  
**Points:** 4  

## Problem Statement  
Given a 2D array `intervals[][]` representing intervals where `intervals[i] = [starti, endi]`, return the **minimum number of intervals** you need to remove to make the rest of the intervals **non-overlapping**.

## Examples  

### Example 1:  
**Input:**  
`intervals = [[1, 2], [2, 3], [3, 4], [1, 3]]`  
**Output:**  
`1`  
**Explanation:**  
Interval `[1, 3]` can be removed, and the rest of the intervals `[1, 2], [2, 3], [3, 4]` are non-overlapping.  

### Example 2:  
**Input:**  
`intervals = [[1, 3], [1, 3], [1, 3]]`  
**Output:**  
`2`  
**Explanation:**  
Two `[1, 3]` intervals need to be removed to make the rest of the intervals non-overlapping.  

### Example 3:  
**Input:**  
`intervals = [[1, 2], [5, 10], [18, 35], [40, 45]]`  
**Output:**  
`0`  
**Explanation:**  
All ranges are already non-overlapping, so no intervals need to be removed.  

## Constraints  
- \( 1 \leq \text{intervals.size()} \leq 10^5 \)  
- \( | \text{intervals[i]} | = 2 \)  
- \( 0 \leq \text{starti} < \text{endi} \leq 5 \times 10^4 \)  

## Solution Approach  
To solve the problem:  
1. **Sort Intervals**: Sort the intervals based on their ending times.  
2. **Greedy Selection**: Use a greedy approach to select intervals with the smallest end time that do not overlap.  
3. **Count Removals**: If an interval overlaps with the previously selected one, count it as a removal.  

### Algorithm  
1. Sort `intervals` by the second value of each pair (`endi`).  
2. Initialize a variable `end` to track the end time of the last non-overlapping interval.  
3. Iterate through `intervals`:  
   - If `starti` of the current interval is greater than or equal to `end`, update `end` to `endi`.  
   - Otherwise, increment the count of intervals to remove.  
4. Return the count of removals.  

## Code Implementation  

### Python  
```python
def eraseOverlapIntervals(intervals):
    # Sort intervals based on the end times
    intervals.sort(key=lambda x: x[1])
    count_removals = 0
    end = float('-inf')

    for start, finish in intervals:
        if start >= end:
            end = finish
        else:
            count_removals += 1
    
    return count_removals

# Example Usage
print(eraseOverlapIntervals([[1, 2], [2, 3], [3, 4], [1, 3]]))  # Output: 1
print(eraseOverlapIntervals([[1, 3], [1, 3], [1, 3]]))          # Output: 2
print(eraseOverlapIntervals([[1, 2], [5, 10], [18, 35], [40, 45]]))  # Output: 0
```

## Time Complexity  
- **Sorting**: \( O(n \log n) \), where \( n \) is the number of intervals.  
- **Iteration**: \( O(n) \).  

**Overall Complexity:** \( O(n \log n) \)  

## Space Complexity  
- **Space for sorting:** \( O(1) \) (if sorting is done in place).  

## Notes  
This problem is an example of the **Greedy Algorithm** approach and emphasizes interval scheduling to maximize non-overlapping intervals.

--- 
