## Problem: Print Anagrams Together

### Difficulty: Medium

### Description:
Given an array of strings, return all groups of strings that are anagrams. The groups must be created in the order of their appearance in the original array. Additionally, strings within each group must be in lexicographic order.

### Examples:

#### Example 1:
**Input:**
```text
arr[] = ["act", "god", "cat", "dog", "tac"]
```
**Output:**
```text
[ ["act", "cat", "tac"], ["god", "dog"] ]
```
**Explanation:**
- Group 1: "act", "cat", and "tac" are anagrams.
- Group 2: "god" and "dog" are anagrams.

#### Example 2:
**Input:**
```text
arr[] = ["no", "on", "is"]
```
**Output:**
```text
[ ["is"], ["no", "on"] ]
```
**Explanation:**
- Group 1: "is" forms its own group.
- Group 2: "no" and "on" are anagrams.

#### Example 3:
**Input:**
```text
arr[] = ["listen", "silent", "enlist", "abc", "cab", "bac", "rat", "tar", "art"]
```
**Output:**
```text
[ ["abc", "bac", "cab"], ["listen", "silent", "enlist"], ["rat", "tar", "art"] ]
```

### Constraints:
- \(1 \leq \text{arr.size()} \leq 100\)
- \(1 \leq \text{arr[i].size()} \leq 10\)

---

## Solution

### Implementation:

```cpp
class Solution {
  public:
    vector<vector<string>> anagrams(vector<string>& arr) {
        unordered_map<string, vector<string>> groupedAnagrams;

        // Group strings by their sorted version
        for (const string& str : arr) {
            string sortedStr = str;
            sort(sortedStr.begin(), sortedStr.end());
            groupedAnagrams[sortedStr].push_back(str);
        }

        // Collect the groups into a result vector
        vector<vector<string>> result;
        for (const string& str : arr) {
            string sortedStr = str;
            sort(sortedStr.begin(), sortedStr.end());

            if (!groupedAnagrams[sortedStr].empty()) {
                result.push_back(groupedAnagrams[sortedStr]);
                groupedAnagrams[sortedStr].clear(); // Avoid duplication in result
            }
        }

        return result;
    }
};
```

---

### Explanation:

1. **Hash Map for Grouping**:
   - Use an `unordered_map` where the key is the sorted version of the string (ensuring anagrams share the same key).
   - The value is a vector of strings that are anagrams.

2. **Sorting for Keys**:
   - For each string, sort its characters and use the sorted string as the key.

3. **Maintaining Order**:
   - Iterate over the input array to ensure groups appear in the order of first occurrence.
   - Clear the processed group in the map after adding it to avoid duplicates.

4. **No Extra Sorting**:
   - Maintain the original relative order of strings within each group.

---

### Example Walkthrough:

#### Input:
```text
act god cat dog tac
```

#### Execution:
1. Group by sorted keys:
   - `"act"` -> `"act"`
   - `"god"` -> `"dgo"`
   - `"cat"` -> `"act"`
   - `"dog"` -> `"dgo"`
   - `"tac"` -> `"act"`

   Resulting Map:
   ```text
   { "act": ["act", "cat", "tac"], "dgo": ["god", "dog"] }
   ```

2. Collect groups in order of appearance:
   ```text
   [ ["act", "cat", "tac"], ["god", "dog"] ]
   ```

#### Output:
```text
act cat tac
god dog
