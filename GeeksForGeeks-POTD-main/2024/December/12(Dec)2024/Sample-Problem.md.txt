# Problem of the Day: Number of Occurrences

## Problem Statement
Given a sorted array `arr[]` and a number `target`, you need to find the number of occurrences of `target` in `arr[]`.

### Input
- The first line of input contains the size of the array `n`.
- The second line contains `n` space-separated integers denoting the elements of the array `arr[]`.
- The third line contains the integer `target`.

### Output
- Print a single integer denoting the number of occurrences of `target` in the array.

### Constraints
- $1 \leq n \leq 10^6$
- $1 \leq arr[i] \leq 10^6$
- $1 \leq target \leq 10^6$

### Example
#### Input:
```
7
1 1 2 2 2 2 3
2
```
#### Output:
```
4
```
#### Explanation:
`target = 2` occurs 4 times in the given array, so the output is 4.

#### Input:
```
7
1 1 2 2 2 2 3
4
```
#### Output:
```
0
```
#### Explanation:
`target = 4` is not present in the given array, so the output is 0.

#### Input:
```
6
8 9 10 12 12 12
12
```
#### Output:
```
3
```
#### Explanation:
`target = 12` occurs 3 times in the given array, so the output is 3.

## Approach
1. **Binary Search for First Occurrence**:
   Use binary search to find the first occurrence of `target` in the array.
2. **Binary Search for Last Occurrence**:
   Use binary search to find the last occurrence of `target` in the array.
3. **Count Calculation**:
   The number of occurrences is calculated as `last - first + 1`. If `target` is not found, return `0`.

## Solution Code
```cpp
class Solution {
  public:
    int findFirstOccurrence(vector<int>& arr, int target) {
        int low = 0, high = arr.size() - 1, result = -1;
        while (low <= high) {
            int mid = low + (high - low) / 2;
            if (arr[mid] == target) {
                result = mid;
                high = mid - 1;
            } else if (arr[mid] < target) {
                low = mid + 1;
            } else {
                high = mid - 1;
            }
        }
        return result;
    }

    int findLastOccurrence(vector<int>& arr, int target) {
        int low = 0, high = arr.size() - 1, result = -1;
        while (low <= high) {
            int mid = low + (high - low) / 2;
            if (arr[mid] == target) {
                result = mid;
                low = mid + 1;
            } else if (arr[mid] < target) {
                low = mid + 1;
            } else {
                high = mid - 1;
            }
        }
        return result;
    }

    int countFreq(vector<int>& arr, int target) {
        int first = findFirstOccurrence(arr, target);
        if (first == -1) {
            return 0;
        }
        int last = findLastOccurrence(arr, target);
        return last - first + 1;
    }
};
```

## Tags
- Binary Search
- Array
- Frequency Count

---

### Notes
Make sure to handle edge cases such as when `target` is not present in the array or when all elements are the same as `target`. Validate input size to avoid performance issues for large arrays.
