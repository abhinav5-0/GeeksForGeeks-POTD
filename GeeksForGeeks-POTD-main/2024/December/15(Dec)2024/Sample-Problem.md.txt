# Sample Problem: Find a Peak Element in an Array

## Problem Statement
Given an array `arr[]` where no two adjacent elements are the same, find the index of a **peak element**. An element is considered a peak if it is greater than its adjacent elements (if they exist). If there are multiple peak elements, return the index of any one of them.

### Notes:
- Consider the element before the first element and the element after the last element as **negative infinity**.
- The function should output `true` if the index returned is correct, otherwise `false`.

### Examples:
#### Input:

arr = [1, 2, 4, 5, 7, 8, 3]
```
#### Output:

true
```
#### Explanation:
`arr[5] = 8` is a peak element because `arr[4] < arr[5] > arr[6]`.

#### Input:

arr = [10, 20, 15, 2, 23, 90, 80]
```
#### Output:

true
```
#### Explanation:
`arr[1] = 20` and `arr[5] = 90` are peak elements. Both indices are valid outputs.

#### Input:

arr = [1, 2, 3]
```
#### Output:

true
```
#### Explanation:
`arr[2] = 3` is a peak element because it is greater than its left neighbor and has no right neighbor (treated as negative infinity).

---

## Constraints:
1 ≤ arr.size() ≤ 10^6
-2^31 ≤ arr[i] ≤ 2^31 - 1

---

## Function Signature
```cpp
class Solution {
  public:
    int peakElement(vector<int> &arr);
};
```

---

## Approach

1. **Binary Search Logic:**
   - Start with two pointers: `low = 0` and `high = arr.size() - 1`.
   - Compute the middle index: `mid = low + (high - low) / 2`.
   - Check if `arr[mid]` is a peak element:
     - If `arr[mid]` is greater than both neighbors (or boundary conditions), return `mid`.
     - If the left neighbor is greater, search the left half (`high = mid - 1`).
     - Otherwise, search the right half (`low = mid + 1`).

2. **Repeat:** Narrow the search range until a peak is found.

3. **Guaranteed Peak:** Due to the problem constraints, a peak always exists.

---

## Example Code

```cpp
class Solution {
  public:
    int peakElement(vector<int> &arr) {
        int low = 0, high = arr.size() - 1;

        while (low <= high) {
            int mid = low + (high - low) / 2;

            if ((mid == 0 || arr[mid] > arr[mid - 1]) &&
                (mid == arr.size() - 1 || arr[mid] > arr[mid + 1])) {
                return mid;
            }

            if (mid > 0 && arr[mid - 1] > arr[mid]) {
                high = mid - 1;
            } else {
                low = mid + 1;
            }
        }

        return -1; // Should not reach here due to constraints
    }
};
```

---

## Complexity Analysis
- **Time Complexity:** \(O(\log n)\) 
  - Binary search reduces the search space by half at every step.
- **Space Complexity:** \(O(1)\)
  - The algorithm uses constant space.

---

## Driver Code

```cpp
#include <bits/stdc++.h>
using namespace std;

int main() {
    int t;
    cin >> t;
    cin.ignore();
    while (t--) {
        vector<int> a;
        string input;
        getline(cin, input);
        stringstream ss(input);
        int number;
        while (ss >> number) {
            a.push_back(number);
        }

        Solution ob;
        int idx = ob.peakElement(a);
        int n = a.size();
        bool f = 0;
        if (idx < 0 || idx >= n)
            cout << "false" << endl;
        else {
            if (n == 1 && idx == 0)
                f = 1;
            else if (idx == 0 && a[0] > a[1])
                f = 1;
            else if (idx == n - 1 && a[n - 1] > a[n - 2])
                f = 1;
            else if (a[idx] > a[idx + 1] && a[idx] > a[idx - 1])
                f = 1;
            else
                f = 0;
            cout << (f ? "true" : "false") << endl;
        }
        cout << "~" << endl;
    }
    return 0;
}
