# Set Matrix Zeroes

### Problem Statement
You are given a 2D matrix `mat[][]` of size `n × m`. The task is to modify the matrix such that if `mat[i][j]` is `0`, all the elements in the `i-th` row and `j-th` column are set to `0` while achieving this in **constant space complexity**.

---

### Examples

#### Example 1
**Input:**
```
mat[][] = [ [1, -1, 1],
            [-1,  0, 1],
            [1, -1, 1] ]
```

**Output:**
```
[ [1,  0, 1],
  [0,  0, 0],
  [1,  0, 1] ]
```

**Explanation:**
Element `mat[1][1]` is `0`, so all elements in row `1` and column `1` are updated to `0`.

#### Example 2
**Input:**
```
mat[][] = [ [0, 1, 2, 0],
            [3, 4, 5, 2],
            [1, 3, 1, 5] ]
```

**Output:**
```
[ [0, 0, 0, 0],
  [0, 4, 5, 0],
  [0, 3, 1, 0] ]
```

**Explanation:**
Elements `mat[0][0]` and `mat[0][3]` are `0`. Therefore, all elements in row `0`, column `0`, and column `3` are updated to `0`.

---

### Constraints
- `1 ≤ n, m ≤ 500`
- `-2^{31} ≤ mat[i][j] ≤ 2^{31} - 1`

---

### Approach

1. **Markers for Rows and Columns:**
   Use the first row and first column of the matrix as markers to indicate which rows and columns should be set to `0`.

2. **Additional Variables:**
   Use two additional variables (`rowZero` and `colZero`) to track if the first row or column needs to be zeroed.

3. **Steps:**
   - Scan through the matrix to update markers.
   - Use the markers to set rows and columns to zero.
   - Finally, update the first row and column as required.

4. **Complexity:**
   - **Time Complexity:** `O(n × m)`
   - **Space Complexity:** `O(1)`

---

### Implementation

```cpp
class Solution {
public:
    void setMatrixZeroes(vector<vector<int>> &mat) {
        int n = mat.size();
        int m = mat[0].size();
        bool rowZero = false, colZero = false;

        // Check if the first row or column needs to be zero
        for (int i = 0; i < n; i++) {
            if (mat[i][0] == 0) colZero = true;
        }
        for (int j = 0; j < m; j++) {
            if (mat[0][j] == 0) rowZero = true;
        }

        // Use first row and column as markers
        for (int i = 1; i < n; i++) {
            for (int j = 1; j < m; j++) {
                if (mat[i][j] == 0) {
                    mat[i][0] = 0;
                    mat[0][j] = 0;
                }
            }
        }

        // Set rows and columns to zero based on markers
        for (int i = 1; i < n; i++) {
            for (int j = 1; j < m; j++) {
                if (mat[i][0] == 0 || mat[0][j] == 0) {
                    mat[i][j] = 0;
                }
            }
        }

        // Update the first row if needed
        if (rowZero) {
            for (int j = 0; j < m; j++) mat[0][j] = 0;
        }

        // Update the first column if needed
        if (colZero) {
            for (int i = 0; i < n; i++) mat[i][0] = 0;
        }
    }
};
```

---

### Usage
The provided implementation can be tested using the driver code below:

```cpp
#include <bits/stdc++.h>
using namespace std;

int main() {
    int t;
    cin >> t;
    while (t--) {
        int n, m;
        cin >> n >> m;
        vector<vector<int>> mat(n, vector<int>(m));
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                cin >> mat[i][j];
            }
        }

        Solution ob;
        ob.setMatrixZeroes(mat);

        for (auto &row : mat) {
            for (auto &elem : row) {
                cout << elem << " ";
            }
            cout << endl;
        }
        cout << "~\n";
    }
    return 0;
}
```

---

### Notes
- Ensure that the constraints are adhered to while designing and testing the solution.
- The problem is particularly interesting as it emphasizes constant space usage, making it a good exercise in efficient programming.

