Merge Two Sorted Arrays Without Extra Space

Problem Statement

Given two sorted arrays a[] and b[] of size n and m respectively, the task is to merge them in sorted order without using any extra space. Modify a[] so that it contains the first n smallest elements and b[] so that it contains the last m largest elements.

Examples

Example 1:

Input:

a[] = [2, 4, 7, 10]
b[] = [2, 3]

Output:

2 2 3 4
7 10

Explanation:
After merging the two non-decreasing arrays, we get 2 2 3 4 7 10.

Example 2:

Input:

a[] = [1, 5, 9, 10, 15, 20]
b[] = [2, 3, 8, 13]

Output:

1 2 3 5 8 9
10 13 15 20

Explanation:
After merging, the arrays become 1 2 3 5 8 9 10 13 15 20.

Example 3:

Input:

a[] = [0, 1]
b[] = [2, 3]

Output:

0 1
2 3

Explanation:
After merging, the arrays become 0 1 2 3.

Constraints





Solution Approach

Algorithm

Gap Method:

Start with a gap value .

Reduce the gap iteratively by half until it becomes 1.

Comparison and Swapping:

Compare elements separated by the gap across a[] and b[].

Swap them if they are out of order.

Merge Completion:

Repeat the process until both arrays are fully sorted.

Code Implementation

class Solution {
  public:
    void mergeArrays(vector<int>& a, vector<int>& b) {
        int n = a.size(), m = b.size();
        int gap = ceil((n + m) / 2.0);

        while (gap > 0) {
            int i = 0, j = gap;

            while (j < (n + m)) {
                if (j < n && a[i] > a[j]) {
                    swap(a[i], a[j]);
                } else if (j >= n && i < n && a[i] > b[j - n]) {
                    swap(a[i], b[j - n]);
                } else if (j >= n && i >= n && b[i - n] > b[j - n]) {
                    swap(b[i - n], b[j - n]);
                }
                i++;
                j++;
            }

            if (gap == 1) break;
            gap = ceil(gap / 2.0);
        }
    }
};

Key Insights

In-Place Merge: The algorithm modifies the arrays directly without using extra space.

Efficient Gap Reduction: The gap reduces logarithmically, optimizing the comparisons.

Handles Large Input: Works efficiently even for large input sizes due to the logarithmic reduction of the gap.

Complexity Analysis

Time Complexity: 

The gap reduces logarithmically, and each iteration involves  comparisons.

Space Complexity: 

No extra space is used.

