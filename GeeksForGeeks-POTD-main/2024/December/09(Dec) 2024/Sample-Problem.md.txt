# Problem of the Day: Insert Interval

## Problem Description

You are given an array of non-overlapping intervals `intervals`, where each interval is represented by `[start, end]`. The array is sorted by the `start` of each interval.

You are also given a new interval `newInterval = [newStart, newEnd]`. Your task is to insert this new interval into the `intervals` array such that the array remains sorted and no overlapping intervals exist. If there are overlapping intervals, merge them.

### Example:

**Input:**
```cpp
intervals = [[1,3], [4,5], [6,7], [8,10]]
newInterval = [5,6]
Output:

cpp
Copy code
[[1,3], [4,7], [8,10]]
Approach:
Add non-overlapping intervals before the new interval.
Merge any overlapping intervals with the new interval.
Add the remaining intervals after the merged interval.
C++ Solution Code
cpp
Copy code
class Solution {
public:
    vector<vector<int>> insertInterval(vector<vector<int>> &intervals, vector<int> &newInterval) {
        vector<vector<int>> result;
        int i = 0;
        int n = intervals.size();

        // Add intervals before the newInterval
        while (i < n && intervals[i][1] < newInterval[0]) {
            result.push_back(intervals[i]);
            i++;
        }

        // Merge overlapping intervals
        while (i < n && intervals[i][0] <= newInterval[1]) {
            newInterval[0] = min(newInterval[0], intervals[i][0]);
            newInterval[1] = max(newInterval[1], intervals[i][1]);
            i++;
        }
        result.push_back(newInterval);

        // Add remaining intervals
        while (i < n) {
            result.push_back(intervals[i]);
            i++;
        }

        return result;
    }
};
Explanation:
Time Complexity: O(n), where n is the number of intervals.
Space Complexity: O(n) for storing the result.