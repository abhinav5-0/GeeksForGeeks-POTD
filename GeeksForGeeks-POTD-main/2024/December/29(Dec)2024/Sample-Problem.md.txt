# Intersection of Two Arrays with Duplicate Elements

## Problem Statement
Given two integer arrays `a[]` and `b[]`, find the intersection of the two arrays. Intersection of two arrays is defined as elements that are common in both arrays. The intersection result should not have duplicate elements, and the order of elements in the result can be arbitrary.

**Note**: The driver code will sort the resulting array in increasing order before printing.

## Examples

### Example 1
**Input:**
```
a[] = [1, 2, 1, 3, 1], b[] = [3, 1, 3, 4, 1]
```
**Output:**
```
[1, 3]
```
**Explanation:**
1 and 3 are the only common elements and we need to print only one occurrence of each common element.

### Example 2
**Input:**
```
a[] = [1, 1, 1], b[] = [1, 1, 1, 1, 1]
```
**Output:**
```
[1]
```
**Explanation:**
1 is the only common element present in both arrays.

### Example 3
**Input:**
```
a[] = [1, 2, 3], b[] = [4, 5, 6]
```
**Output:**
```
[]
```
**Explanation:**
No common element in both arrays.

## Constraints
- \(1 \leq \text{a.size()}, \text{b.size()} \leq 10^5\)
- \(1 \leq \text{a}[i], \text{b}[i] \leq 10^5\)

## Solution Approach
### Algorithm
1. Use a `set` to store unique elements from the first array (`a[]`).
2. Iterate through the second array (`b[]`), and for each element, check if it exists in the set from step 1.
3. If an element is found in the set, add it to a result `set` to ensure no duplicates in the result.
4. Convert the result `set` to a `vector` and return it.

### Code Implementation
```cpp
#include <bits/stdc++.h>
using namespace std;

class Solution {
  public:
    vector<int> intersectionWithDuplicates(vector<int>& a, vector<int>& b) {
        // Use sets to store unique elements
        unordered_set<int> setA(a.begin(), a.end());
        unordered_set<int> result;

        // Find intersection elements
        for (int num : b) {
            if (setA.count(num)) {
                result.insert(num);
            }
        }

        // Convert set to vector
        vector<int> intersection(result.begin(), result.end());
        return intersection;
    }
};

int main() {
    int t;
    cin >> t;
    cin.ignore();
    while (t--) {
        vector<int> arr1, arr2;
        string input;

        // Read first array
        getline(cin, input);
        stringstream ss(input);
        int number;
        while (ss >> number) {
            arr1.push_back(number);
        }

        // Read second array
        getline(cin, input);
        stringstream ss2(input);
        while (ss2 >> number) {
            arr2.push_back(number);
        }

        Solution ob;
        vector<int> res = ob.intersectionWithDuplicates(arr1, arr2);
        sort(res.begin(), res.end());

        if (res.size() == 0) {
            cout << "[]" << endl;
        } else {
            for (auto it : res)
                cout << it << " ";
            cout << endl;
        }
        cout << "~" << endl;
    }
    return 0;
}
```

### Complexity Analysis
- **Time Complexity**:
  - Insertion into `unordered_set`: \(O(n + m)\), where \(n\) and \(m\) are the sizes of arrays `a[]` and `b[]`.
  - Iteration and checking membership in the set: \(O(m)\).
  - Total: \(O(n + m)\).

- **Space Complexity**:
  - \(O(n + k)\), where \(k\) is the size of the intersection.

## Example Input/Output

### Input
```
2
1 2 1 3 1
3 1 3 4 1
1 1 1
1 1 1 1 1
```

### Output
```
1 3
~
1
~
