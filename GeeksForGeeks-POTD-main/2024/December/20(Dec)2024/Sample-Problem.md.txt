# Problem: Spiral Traversal of a Matrix

You are given a rectangular matrix `mat[][]` of size `n x m`. Your task is to traverse the matrix in a spiral order and return the resulting array.

## Examples:

### Example 1:
Input:
```
4 4
1 2 3 4
5 6 7 8
9 10 11 12
13 14 15 16
```
Output:
```
1 2 3 4 8 12 16 15 14 13 9 5 6 7 11 10
```

### Example 2:
Input:
```
3 6
1 2 3 4 5 6
7 8 9 10 11 12
13 14 15 16 17 18
```
Output:
```
1 2 3 4 5 6 12 18 17 16 15 14 13 7 8 9 10 11
```

### Example 3:
Input:
```
2 4
32 44 27 23
54 28 50 62
```
Output:
```
32 44 27 23 62 50 28 54
```

---

## Constraints:
- 1 <= n, m <= 1000
- 0 <= mat[i][j] <= 100

---

## Task:
Implement a function `spirallyTraverse` that takes the following parameters:
- `vector<vector<int>> &mat`: The 2D matrix.
- `int r`: Number of rows in the matrix.
- `int c`: Number of columns in the matrix.

### Function Signature:
```cpp
vector<int> spirallyTraverse(vector<vector<int>> &mat, int r, int c);
```

---

## Approach:
1. Use four boundaries (`top`, `bottom`, `left`, `right`) to define the current layer of the matrix to traverse.
2. Perform traversal in the following sequence until all elements are covered:
   - From left to right along the `top` boundary.
   - From top to bottom along the `right` boundary.
   - From right to left along the `bottom` boundary (if applicable).
   - From bottom to top along the `left` boundary (if applicable).
3. Adjust the boundaries after each traversal.

---

## Example Walkthrough:

### Input:
```
4 4
1 2 3 4
5 6 7 8
9 10 11 12
13 14 15 16
```

### Traversal Steps:
1. Traverse top row: `1 2 3 4`
2. Traverse right column: `8 12 16`
3. Traverse bottom row: `15 14 13`
4. Traverse left column: `9 5`
5. Traverse inner layer: `6 7 11 10`

### Output:
```
1 2 3 4 8 12 16 15 14 13 9 5 6 7 11 10
