# Problem of the Day: Search in Strictly Sorted 2D Matrix

## Problem Statement
Given a strictly sorted 2D matrix `mat[][]` of size `n x m` and a number `x`, determine whether the number `x` is present in the matrix.

### Note
In a strictly sorted matrix:
- Each row is sorted in strictly increasing order.
- The first element of the `i-th` row (`i != 0`) is greater than the last element of the `(i-1)-th` row.

## Examples
### Example 1
**Input:**  
```
mat = [[1, 5, 9], 
       [14, 20, 21], 
       [30, 34, 43]]
x = 14
```
**Output:**
```
true
```
**Explanation:** 14 is present in the matrix.

### Example 2
**Input:**
```
mat = [[1, 5, 9, 11], 
       [14, 20, 21, 26], 
       [30, 34, 43, 50]]
x = 42
```
**Output:**
```
false
```
**Explanation:** 42 is not present in the matrix.

### Example 3
**Input:**
```
mat = [[87, 96, 99], 
       [101, 103, 111]]
x = 101
```
**Output:**
```
true
```
**Explanation:** 101 is present in the matrix.

## Constraints
- `1 <= n, m <= 1000`
- `1 <= mat[i][j] <= 10^9`
- `1 <= x <= 10^9`

## Approach
The problem can be solved efficiently using binary search due to the sorted properties of the matrix.

### Binary Search in a 2D Matrix
Treat the matrix as a flattened 1D array and perform binary search. To map the indices:
- Row index = `index / m`
- Column index = `index % m`

### Algorithm
1. Initialize two pointers: `low = 0` and `high = n * m - 1`.
2. While `low <= high`:
   - Compute the middle index `mid = low + (high - low) / 2`.
   - Map `mid` to the 2D matrix element: `mat[mid / m][mid % m]`.
   - If the middle element equals `x`, return `true`.
   - If the middle element is smaller than `x`, move `low` to `mid + 1`.
   - Otherwise, move `high` to `mid - 1`.
3. If the loop ends, return `false` (element not found).

### Complexity
- **Time Complexity:** `O(log(n * m))` due to binary search.
- **Space Complexity:** `O(1)` as no extra space is used.

## Implementation
```cpp
#include <bits/stdc++.h>
using namespace std;

class Solution {
  public:
    // Function to search a given number in row-column sorted matrix.
    bool searchMatrix(vector<vector<int>> &mat, int x) {
        int n = mat.size();
        int m = mat[0].size();
        
        int low = 0, high = n * m - 1;
        
        while (low <= high) {
            int mid = low + (high - low) / 2;
            int midElement = mat[mid / m][mid % m];
            
            if (midElement == x) {
                return true;
            } else if (midElement < x) {
                low = mid + 1;
            } else {
                high = mid - 1;
            }
        }
        
        return false; // Element not found
    }
};

int main() {
    int t;
    cin >> t;
    while (t--) {
        int n, m;
        cin >> n >> m;
        vector<vector<int>> matrix(n, vector<int>(m));

        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                cin >> matrix[i][j];
            }
        }

        int x;
        cin >> x;
        Solution obj;
        if (obj.searchMatrix(matrix, x))
            cout << "true\n";
        else
            cout << "false\n";
    }
    return 0;
}
```

## Dry Run Example
### Input
```
mat = [[1, 5, 9],
       [14, 20, 21],
       [30, 34, 43]]
x = 14
```
1. **Initialization:** `low = 0, high = 8`
2. **First Iteration:**
   - `mid = 4, midElement = mat[4 / 3][4 % 3] = mat[1][1] = 20`
   - `20 > 14`, so `high = 3`
3. **Second Iteration:**
   - `mid = 1, midElement = mat[1 / 3][1 % 3] = mat[0][1] = 5`
   - `5 < 14`, so `low = 2`
4. **Third Iteration:**
   - `mid = 2, midElement = mat[2 / 3][2 % 3] = mat[0][2] = 9`
   - `9 < 14`, so `low = 3`
5. **Fourth Iteration:**
   - `mid = 3, midElement = mat[3 / 3][3 % 3] = mat[1][0] = 14`
   - `14 == 14`, return `true`.

### Output
```
true
```

## Notes
- The strictly sorted property ensures efficient binary search.
- Handles edge cases like single-row or single-column matrices efficiently.

## Tags
- Binary Search
- 2D Matrix
- Sorted Matrix
